{"version":3,"sources":["../../src/ngx-croppie.component.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAA,EAAW,KAAA,EAAO,MAAA,EAAQ,YAAA,EAAkE,SAAA,EAAsB,MAAO,eAAA,CAAgB;AAClJ,OAAO,OAAA,MAAa,SAAA,CAAU;AAU9B;IAAA;QAKK,wBAAmB,GAAsB,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC;QAC9E,WAAM,GAAkE,IAAI,YAAY,EAAmD,CAAC;IAoCjJ,CAAC;IAjCG,sCAAQ,GAAR;QAAA,iBASC;QARG,IAAI,CAAC,QAAQ,GAAG,IAAI,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;QAE/E,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;YACf,GAAG,EAAE,IAAI,CAAC,QAAQ;SACrB,CAAC,CAAC;QACH,IAAI,CAAC,IAAI,GAAG,UAAC,GAAW;YACpB,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,KAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC/C,CAAC,CAAA;IACL,CAAC;IAED,uCAAS,GAAT;QAAA,iBAIC;QAHG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,IAAI,CAAC,UAAC,GAAG;YACpD,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC1B,CAAC,CAAC,CAAC;IACP,CAAC;IACE,8BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACtB,QAAQ,EAAE,aAAa;oBACvB,QAAQ,EAAE,iDAA+C;iBAC5D,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,kCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACK,kCAAc,GAA2C;QAChE,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,WAAW,EAAG,EAAE,EAAE;QAC1D,gBAAgB,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QACpC,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC9B,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC1B,qBAAqB,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QACzC,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;KAC5B,CAAC;IACF,0BAAC;CA1CD,AA0CC,IAAA;SA1CY,mBAAmB","file":"ngx-croppie.component.js","sourceRoot":"","sourcesContent":["import { NgxCroppieModule } from './ngx-croppie';\r\nimport { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, ViewEncapsulation, OnInit, ViewChild, ElementRef } from '@angular/core';\r\nimport Croppie from 'croppie';\r\nimport { CroppieOptions, ResultOptions } from 'croppie';\r\n\r\nexport type Type = 'canvas' | 'base64' | 'html' | 'blob' | 'rawcanvas';\r\n\r\nexport interface TempResultOptions extends ResultOptions {\r\n    type?: Type;\r\n}\r\n\r\n\r\nexport class NgxCroppieComponent implements OnInit {\r\n     imageEdit: ElementRef;\r\n     croppieOptions: CroppieOptions;\r\n     imageUrl: string;\r\n     bind: (img: string) => void;\r\n     outputFormatOptions: TempResultOptions = { type: 'base64', size: 'viewport' };\r\n     result: EventEmitter<string | HTMLElement | Blob | HTMLCanvasElement> = new EventEmitter<string | HTMLElement | Blob | HTMLCanvasElement>();\r\n\r\n    private _croppie: Croppie;\r\n    ngOnInit(): void {\r\n        this._croppie = new Croppie(this.imageEdit.nativeElement, this.croppieOptions);\r\n\r\n        this._croppie.bind({\r\n            url: this.imageUrl\r\n        });\r\n        this.bind = (img: string) => {\r\n            this._croppie.bind({ url: this.imageUrl });\r\n        }\r\n    }\r\n\r\n    newResult() {\r\n        this._croppie.result(this.outputFormatOptions).then((res) => {\r\n            this.result.emit(res);\r\n        });\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n    selector: 'ngx-croppie',\r\n    template: `<div #imageEdit (update)=\"newResult()\"></div>`\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'imageEdit': [{ type: ViewChild, args: ['imageEdit', ] },],\n'croppieOptions': [{ type: Input },],\n'imageUrl': [{ type: Input },],\n'bind': [{ type: Input },],\n'outputFormatOptions': [{ type: Input },],\n'result': [{ type: Output },],\n};\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}